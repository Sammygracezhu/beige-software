<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Beige Replicator. Database replication one way specification #1.</title>
  </properties>

  <body>

    <!-- The body of the document contains a number of sections -->
    <section name="Beige Replicator. Database replication one way specification #1.">
      <p>Examples of usage:
        <ul>
          <li>Distributed databases - one database in store A, another in store B, central database C in the office.</li>
          <li>Data replication from Tax accounting (records are made according Tax Law rules)
            to Market accounting (records are made according market rules),
            e.g. in tax accounting bad debt must be reported at the end of the year after being approved by authority,
            but in market accounting - immediately.
          </li>
        </ul>
      </p>
      <h4>Database replication one way, description:</h4>
      <p>* Replication of entities from database A to database B.</p>
      <p>* Automatically detection of entities to be replicated, e.g. a new entity (not yet replicated) or a changed one that required to be synchronized.</p>
      <p>* Entities of type <b>org.beigesoft.persistable.APersistableBase</b> that has implicit
        triple ID - {itsId - autogenerated ID for current database, and idBirth with idDatabaseBirth for foreign entities ID in origin database}
        should be synchronized by {idBirth and idDatabaseBirth}. Other by explicit ID (Long or String type).
      </p>
      <p>* It uses class settings <b>filter</b> for implement filter of records in table to be replicated,
        e.g. ignore all accounting records for account <b>BadDebt</b>.
      </p>

      <h4>Beige-Settings.</h4>
      <p>There are class settings:
        <ul>
          <li>filter - null or SQL where clause or name of filter service (org.beigesoft.replicator.filter.IFilterEntities), e.g. "ITSID!='BadDebts'" or "filterLastVersion"</li>
          <li>ISrvEntitySync - Service to synchronize entity (that just read) with entity in database.
            Usually just return isNew. For APersistableBase it must fill properly {itsId, idBirth and idDatabaseBirth}.</li>
        </ul>
        <b>org.beigesoft.replicator.filter.IFilterEntities</b> has method <b>makeFilter(Class pEntityClass, Map pAddParam)</b>
        that return null or conditions without WHERE word e.g. "ITSID>12". Filter can return null for user-defined kind of filter
        e.g. user can choose avoided debits accounts, but if it choose nothing - result will be null.
      </p>
      
      <h4>Requesting database side implementation of "automatically detection of entities to be replicated".</h4>
      <p>For entities with <b>itsVersion</b> and <b>changed time</b> algorithm requesting database can use its maximum value to make WHERE clause (in request).</p>
      <p>For immutable entities with autoincremented ID (e.g. accounting entries) requesting database can use its maximum value to make WHERE clause (in request).</p>
      <p>For compound entities with owned sublists (e.g. Tax category and its taxes lines) requesting database can use <b>dynamic owner filter</b> algorithm.</p>

      <h5>Filter for immutable entities of type APersistableBase</h5>
      <p>Filter must return result SQL:
        <pre>
          (ITSID>[last_replicated_id_birth_for_requested_database_id] and IDDATABASEBIRTH=[requested_database_id])
        </pre>
        E.g. at first replication from database ID=2135 it should be:
        <pre>
          (ITSID>0 and IDDATABASEBIRTH=2135)
        </pre>
        After <b>last_replicated_id_birth_for_requested_database_id</b> must be retrieved from requesting database with:
        <pre>
          select max(IDBIRTH) as MAX_IDBIRTH from [table_name] where IDDATABASEBIRTH=2135;
        </pre>
        This filter is implemented with <b>org.beigesoft.replicator.filter.FilterPersistableBaseImmutable</b>.
        It's required parameter requestedDatabaseId (in pAddParam).
      </p>

      <h5>Filter for entities with <b>itsVersion</b> and <b>changed time</b> algorithm</h5>
      <p>Filter must return result SQL:
        <pre>
          ITSVERSION>[last_replicated_date]
        </pre>
        where <b>last_replicated_date</b> is last replication date. It should be stored into a persistable entity, e.g. ReplicationMethod.
        This filter is implemented with <b>org.beigesoft.replicator.filter.FilterLastVersionChanged</b>.
        It's required service that evaluates <b>last_replicated_date</b>.
      </p>

      <h5>dynamic owner filter algorithm (method for requesting database)</h5>
      <p>It's used to make filter for owned entities list during runtime, e.g. "customer invoice line" or "tax category line"</p>
      <p>For owners filter usually made by <b>itsVersion</b> with <b>changed time</b> algorithm.
        Received owners ID is used to create this <b>dynamic owner filter</b>.
      </p>

      <h4>Persistable models</h4>
      <p>Persistable model org.beigesoft.replicator.AReplicationMethod:
        <ul>
          <li>APersistableBaseHasName fields.</li>
          <li>lastDateReplication - Date, nullable</li>
          <li>requestedDatabaseId - Integer not null.</li>
        </ul>
      </p>

    </section>

  </body>

</document>
